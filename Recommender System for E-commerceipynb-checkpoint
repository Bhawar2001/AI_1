{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2e164416-8c6e-41e7-ba7f-c4dbf5520211",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns \n",
    "import plotly.express as px \n",
    "from matplotlib import style\n",
    "style.use('ggplot')\n",
    "import re\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "from wordcloud import wordcloud\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer                   \n",
    "from sklearn.model_selection import train_test_split  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7656fe5a-058f-45ca-9746-c3a46b90bec5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Element name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Data type</th>\n",
       "      <th>Character length</th>\n",
       "      <th>Acceptable Values</th>\n",
       "      <th>Required</th>\n",
       "      <th>Accepts null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HS_data</td>\n",
       "      <td>GeoScout Holland Scientific data logger record...</td>\n",
       "      <td>serial</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LONGITUDE</td>\n",
       "      <td>GPS global meridian coordinate in decimal degrees</td>\n",
       "      <td>float</td>\n",
       "      <td>13.0</td>\n",
       "      <td>-ddd.mmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LATITUDE</td>\n",
       "      <td>GPS global parallel coordinate in decimal degrees</td>\n",
       "      <td>float</td>\n",
       "      <td>10.0</td>\n",
       "      <td>dd.mmmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ELEVATION</td>\n",
       "      <td>GPS meters above sea-level geoid</td>\n",
       "      <td>float</td>\n",
       "      <td>5.0</td>\n",
       "      <td>x.x</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FIX_TYPE</td>\n",
       "      <td>GPS signal indication 2=WASS DGPS for better a...</td>\n",
       "      <td>integer</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1 to 2</td>\n",
       "      <td>n</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Element name                                        Description Data type  \\\n",
       "0      HS_data  GeoScout Holland Scientific data logger record...    serial   \n",
       "1    LONGITUDE  GPS global meridian coordinate in decimal degrees     float   \n",
       "2     LATITUDE  GPS global parallel coordinate in decimal degrees     float   \n",
       "3    ELEVATION                   GPS meters above sea-level geoid     float   \n",
       "4     FIX_TYPE  GPS signal indication 2=WASS DGPS for better a...   integer   \n",
       "\n",
       "   Character length Acceptable Values Required Accepts null  \n",
       "0               NaN               NaN      NaN          NaN  \n",
       "1              13.0       -ddd.mmmmmm        y            y  \n",
       "2              10.0        dd.mmmmmmm        y            y  \n",
       "3               5.0               x.x        y            y  \n",
       "4               1.0            1 to 2        n            y  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('Amazon Dataset.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "699bc162-0221-4317-9f98-c2e455a58159",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60, 7)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "54920061-f8bb-4afa-9483-edeeebb5dc02",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 60 entries, 0 to 59\n",
      "Data columns (total 7 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Element name       60 non-null     object \n",
      " 1   Description        60 non-null     object \n",
      " 2   Data type          59 non-null     object \n",
      " 3   Character length   57 non-null     float64\n",
      " 4   Acceptable Values  57 non-null     object \n",
      " 5   Required           57 non-null     object \n",
      " 6   Accepts null       57 non-null     object \n",
      "dtypes: float64(1), object(6)\n",
      "memory usage: 3.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b90745a6-1a45-407c-869f-3d75ce761079",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Character length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>57.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>18.122807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>56.395311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>255.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Character length\n",
       "count         57.000000\n",
       "mean          18.122807\n",
       "std           56.395311\n",
       "min            1.000000\n",
       "25%            2.000000\n",
       "50%            5.000000\n",
       "75%            8.000000\n",
       "max          255.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to display statsabount data\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "33fbd92d-3e4d-4fc6-bc4f-b0b6478d5e87",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8, 1)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a1440254-5adc-4e9f-98a8-b0f182e2f86a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histograms\n",
    "df['Description'].hist()\n",
    "plt.savefig(\"EDA_img/heatmap_DF_of_null_values.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bc638bff-1811-45d3-9d6b-7e0d0ae49ea7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histograms\n",
    "df['Character length'].hist()\n",
    "plt.savefig(\"EDA_img/heatmap_DF_of_null_values.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bec0cb44-0f24-4dcc-8f46-260ce3569989",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histograms\n",
    "df['Acceptable Values'].hist()\n",
    "plt.savefig(\"EDA_img/heatmap_DF_of_null_values.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "60abe794-7732-4314-847b-5880314c0094",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGdCAYAAACyzRGfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8g+/7EAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWVElEQVR4nO3df2zddf3o8dfpzhm0m6yLHbEd0K0XK4n74Qwo4gwwEjV8S3CGP/yV1OAIyTAxIUQShoSJ0wxtopcQY3ALNLnELA3VqUgwTIg4DALGDDGrUIiL20KXtUVWt52znvvHDed++2WYna57nXZ7PBKS8/mcT8957Y9Tnn1/PuecQrVarQYAQJKmRg8AAJxbxAcAkEp8AACpxAcAkEp8AACpxAcAkEp8AACpxAcAkEp8AACpxAcAkKrY6AHey+joaFQqlUaPAcywJUuWxMjISKPHAGZYsViMxYsXn9qxZ3iWaatUKlEulxs9BjCDCoVCRPy/17evlYJzl9MuAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApCo2egDg3LLvvy5v9Ah1m/fQzkaPAGcVKx8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkKtZz8I4dO2JgYGDKvo6OjvjhD38YERHHjx+P/v7+2L17d5TL5Vi9enVs2LAhWltbZ2peAGCOqys+IiIuvvji+Na3vlXbbmr6/4snjzzySLz00ktx++23R0tLS2zbti36+vrivvvum5lpAYA5r+7TLk1NTdHa2lr774ILLoiIiImJidi1a1f09vbGihUroqurKzZu3Bh79+6NoaGhGR8cAJib6l75OHjwYNx6661RKpWiu7s7vvSlL0VbW1sMDw/HiRMnYuXKlbVjly5dGm1tbTE0NBTd3d0zOjgAMDfVFR8f/OAHY+PGjdHR0RGjo6MxMDAQ99xzT/T19cXY2FgUi8VYsGDBlJ9ZtGhRjI2NvedjlsvlKJfLte1CoRDNzc2128DZY66+pufq3DBb1RUfa9asqd3u7Oysxchzzz0X8+fPn9YAg4ODUy5iXb58eWzdujWWLFkyrccDZrd9jR5gGtrb2xs9ApxV6j7t8t8tWLAgOjo64uDBg7Fq1aqoVCpx5MiRKasf4+Pj//HdLuvXr4+enp7a9jt/YYyMjESlUjmd8YBZZq6uIBw4cKDRI8CsVywWT3nh4LTi4+jRo3Hw4MH41Kc+FV1dXTFv3rzYs2dPXHnllRERsX///jh06NB/vN6jVCpFqVQ66X3VavV0xgOYEX4XwcyqKz76+/vj8ssvj7a2thgdHY0dO3ZEU1NTrF27NlpaWmLdunXR398fCxcujJaWlti+fXt0d3e72BQAqKkrPg4fPhw/+tGP4l//+ldccMEFcdlll8WWLVtqb7ft7e2NQqEQfX19UalUah8yBgDwjkJ1lq4njoyMTHkXDDD3FQqFqGy4odFj1G3eQzsbPQLMeqVS6ZSv+fDdLgBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAquLp/PDPf/7zePTRR+P666+Pr371qxERcfz48ejv74/du3dHuVyO1atXx4YNG6K1tXUGxgUA5rppr3y8+uqr8dvf/jY6Ozun7H/kkUfixRdfjNtvvz02b94co6Oj0dfXd9qDAgBnh2nFx9GjR+OBBx6IW2+9NRYsWFDbPzExEbt27Yre3t5YsWJFdHV1xcaNG2Pv3r0xNDQ0Y0MDAHPXtE67/PSnP401a9bEqlWr4rHHHqvtHx4ejhMnTsTKlStr+5YuXRptbW0xNDQU3d3d73qscrkc5XK5tl0oFKK5ubl2Gzh7zNXX9FydG2aruuPjD3/4Q7z++uvxve997133jY2NRbFYnLIaEhGxaNGiGBsbO+njDQ4OxsDAQG17+fLlsXXr1liyZEm9owFzwL5GDzAN7e3tjR4Bzip1xcehQ4fi4Ycfjrvvvjvmz58/IwOsX78+enp6atvv/IUxMjISlUplRp4DmB3m6grCgQMHGj0CzHrFYvGUFw7qio/h4eEYHx+PO++8s7ZvcnIy/va3v8UTTzwRmzZtikqlEkeOHJmy+jE+Pv6e73YplUpRKpVOel+1Wq1nPIAzwu8imFl1xcfKlSvjBz/4wZR9P/7xj6OjoyNuvPHGaGtri3nz5sWePXviyiuvjIiI/fv3x6FDh056vQcAcO6pKz6am5vjkksumbLvvPPOi/e97321/evWrYv+/v5YuHBhtLS0xPbt26O7u1t8AAARcZofMnYyvb29USgUoq+vLyqVSu1DxgAAIiIK1Vl6MnNkZGTKW3CBua9QKERlww2NHqNu8x7a2egRYNYrlUqnfMGp73YBAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFKJDwAglfgAAFIV6zn4ySefjCeffDJGRkYiIuKiiy6Km266KdasWRMREcePH4/+/v7YvXt3lMvlWL16dWzYsCFaW1tnfHAAYG4qVKvV6qke/MILL0RTU1O0t7dHtVqNZ555Jnbu3Bn3339/XHzxxfHQQw/FSy+9FLfddlu0tLTEtm3boqmpKe677766BxsZGYlyuVz3zwGzV6FQiMqGGxo9Rt3mPbSz0SPArFcqlWLJkiWndGxdp10uv/zy+OhHPxrt7e3R0dERX/ziF+P888+Pv//97zExMRG7du2K3t7eWLFiRXR1dcXGjRtj7969MTQ0NK1/CABw9qnrtMt/Nzk5Gc8991wcO3Ysuru7Y3h4OE6cOBErV66sHbN06dJoa2uLoaGh6O7uPunjlMvlKSschUIhmpuba7eBs8dcfU3P1blhtqo7Pv7xj3/Epk2bolwux/nnnx933HFHXHTRRfHGG29EsViMBQsWTDl+0aJFMTY29p6PNzg4GAMDA7Xt5cuXx9atW0956QaYW/Y1eoBpaG9vb/QIcFapOz46Ojri+9//fkxMTMQf//jHePDBB2Pz5s3THmD9+vXR09NT237nL4yRkZGoVCrTflxg9pmrKwgHDhxo9Agw6xWLxVNeOKg7PorFYnzgAx+IiIiurq547bXX4vHHH4+rrroqKpVKHDlyZMrqx/j4+H98t0upVIpSqXTS++q4FhbgjPG7CGbWaX/Ox+TkZJTL5ejq6op58+bFnj17avft378/Dh069J7XewAA5566Vj4effTR+MhHPhJtbW1x9OjRePbZZ+OVV16JTZs2RUtLS6xbty76+/tj4cKF0dLSEtu3b4/u7m7xAQDU1BUf4+Pj8eCDD8bo6Gi0tLREZ2dnbNq0KVatWhUREb29vVEoFKKvry8qlUrtQ8YAAN5R14eMZfIhY3D28SFjcPY6Yx8yBgBwusQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqYr1HDw4OBjPP/98/POf/4z58+dHd3d3fOUrX4mOjo7aMcePH4/+/v7YvXt3lMvlWL16dWzYsCFaW1tnenYAYA6qa+XjlVdeic985jOxZcuWuPvuu+PEiRPxne98J44ePVo75pFHHokXX3wxbr/99ti8eXOMjo5GX1/fjA8OAMxNdcXHpk2b4pprromLL744li1bFrfddlscOnQohoeHIyJiYmIidu3aFb29vbFixYro6uqKjRs3xt69e2NoaOiM/AMAgLmlrtMu/9PExERERCxcuDAiIoaHh+PEiROxcuXK2jFLly6Ntra2GBoaiu7u7nc9RrlcjnK5XNsuFArR3Nxcuw2cPebqa3quzg2z1bTjY3JyMh5++OH40Ic+FJdccklERIyNjUWxWIwFCxZMOXbRokUxNjZ20scZHByMgYGB2vby5ctj69atsWTJkumOBsxi+xo9wDS0t7c3egQ4q0w7PrZt2xb79u2Lb3/726c1wPr166Onp6e2/c5fGCMjI1GpVE7rsYHZZa6uIBw4cKDRI8CsVywWT3nhYFrxsW3btnjppZdi8+bN8f73v7+2v7W1NSqVShw5cmTK6sf4+Ph7vtulVCpFqVQ66X3VanU64wHMKL+LYGbVdcFptVqNbdu2xfPPPx/33HNPXHjhhVPu7+rqinnz5sWePXtq+/bv3x+HDh066fUeAMC5p66Vj23btsWzzz4b3/zmN6O5ubl2HUdLS0vMnz8/WlpaYt26ddHf3x8LFy6MlpaW2L59e3R3d4sPACAi6oyPJ598MiIi7r333in7N27cGNdcc01ERPT29kahUIi+vr6oVCq1DxkDAIiIKFRn6cnMkZGRKW/BBea+QqEQlQ03NHqMus17aGejR4BZr1QqnfIFp77bBQBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTFen/glVdeiZ07d8brr78eo6Ojcccdd8THPvax2v3VajV27NgRTz31VBw5ciQuu+yy2LBhQ7S3t8/o4ADA3FT3ysexY8di2bJl8bWvfe2k9//iF7+I3/zmN3HLLbfEd7/73TjvvPNiy5Ytcfz48dMeFgCY++qOjzVr1sQXvvCFKasd76hWq/H444/H5z//+bjiiiuis7Mzvv71r8fo6Gj86U9/mpGBAYC5bUav+XjzzTdjbGwsVq1aVdvX0tISl156aQwNDc3kUwEAc1Td13z8J2NjYxERsWjRoin7Fy1aVLvvfyqXy1Eul2vbhUIhmpuba7eBs8dcfU3P1blhtprR+JiOwcHBGBgYqG0vX748tm7dGkuWLGngVMCZsq/RA0yDC+ZhZs1ofLS2tkZExPj4eCxevLi2f3x8PJYtW3bSn1m/fn309PTUtt/5C2NkZCQqlcpMjgc02FxdQThw4ECjR4BZr1gsnvLCwYzGx4UXXhitra2xZ8+eWmxMTEzEq6++Gp/+9KdP+jOlUilKpdJJ76tWqzM5HsC0+F0EM6vu+Dh69GgcPHiwtv3mm2/GG2+8EQsXLoy2tra4/vrr47HHHov29va48MIL42c/+1ksXrw4rrjiihkdHACYm+qOj9deey02b95c2+7v74+IiKuvvjpuu+22uPHGG+PYsWPxk5/8JCYmJuKyyy6Lu+66K+bPnz9zUwMAc1ahOkvXE0dGRqa8CwaY+wqFQlQ23NDoMeo276GdjR4BZr1SqXTK13z4bhcAIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIFXxTD3wE088Eb/85S9jbGwsOjs74+abb45LL730TD0dADBHnJGVj927d0d/f3/cdNNNsXXr1ujs7IwtW7bE+Pj4mXg6AGAOOSPx8atf/Squu+66uPbaa+Oiiy6KW265JebPnx+/+93vzsTTAQBzyIyfdqlUKjE8PByf+9znavuamppi5cqVMTQ09K7jy+VylMvl2nahUIjm5uYoFs/YGSGgQQqFQhT+14caPUbd5pVKjR4BZr16/r894/+Hf+utt2JycjJaW1un7G9tbY39+/e/6/jBwcEYGBiobX/yk5+Mb3zjG7F48eKZHg2YDf73/2n0BECDNXx5Yf369dHT0zNlX7lcjpK/NOCs8+9//zvuvffeuPfee6O5ubnR4wANMuPxccEFF0RTU1OMjY1N2T82Nvau1ZCIiFKpJDTgHFGtVuP111+ParXa6FGABprxC06LxWJ0dXXFyy+/XNs3OTkZL7/8cnR3d8/00wEAc8wZOe3S09MTDz74YHR1dcWll14ajz/+eBw7diyuueaaM/F0AMAcckbi46qrroq33norduzYEWNjY7Fs2bK46667TnraBTh3lEqluOmmm5xqhXNcoerkKwCQyHe7AACpxAcAkEp8AACpxAcAkEp8AACpxAcAkEp8AGfcM888EzfffPOUb7COiLj//vvjgQceaNBUQKOID+CM+8QnPhGTk5Pxwgsv1PaNj4/Hn//857j22msbOBnQCOIDOOPmz58fa9eujaeffrq27/e//320tbXFhz/84cYNBjSE+ABSXHfddfGXv/wlDh8+HBERTz/9dFx99dVRKBQaPBmQTXwAKZYvXx6dnZ3xzDPPxPDwcOzbt8+XTcI56ox8sRzAyVx33XXx61//Og4fPhyrVq2Ktra2Ro8ENICVDyDN2rVr4/Dhw/HUU0+50BTOYeIDSNPS0hIf//jH4/zzz48rrrii0eMADSI+gFSHDx+OtWvXRqlUavQoQIOIDyDF22+/Hc8//3z89a9/jc9+9rONHgdoIBecAinuvPPOePvtt+PLX/5ydHR0NHocoIEK1Wq12ughAIBzh9MuAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAECq/wt6xquN6j6paQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histograms\n",
    "df['Accepts null'].hist()\n",
    "plt.savefig(\"EDA_img/heatmap_DF_of_null_values.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb2aefd8-5a10-4d7d-a283-925bf0210642",
   "metadata": {
    "tags": []
   },
   "source": [
    "def no_of_words(text):\n",
    "    words= text.split()\n",
    "    word_count = len(words)\n",
    "    return word_coun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a48005fc-8546-4f6c-9d87-db8b24b2c86e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def no_of_words(text):\n",
    "    words= text.split()\n",
    "    word_count = len(words)\n",
    "    return word_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "cd94127d-d64e-4272-a809-59f20712907f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Data type'] = df['Description'].apply(no_of_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f7bf5ad6-3b1b-494a-b7d7-7ff64d5df19b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Element name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Data type</th>\n",
       "      <th>Character length</th>\n",
       "      <th>Acceptable Values</th>\n",
       "      <th>Required</th>\n",
       "      <th>Accepts null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HS_data</td>\n",
       "      <td>GeoScout Holland Scientific data logger record...</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LONGITUDE</td>\n",
       "      <td>GPS global meridian coordinate in decimal degrees</td>\n",
       "      <td>7</td>\n",
       "      <td>13.0</td>\n",
       "      <td>-ddd.mmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LATITUDE</td>\n",
       "      <td>GPS global parallel coordinate in decimal degrees</td>\n",
       "      <td>7</td>\n",
       "      <td>10.0</td>\n",
       "      <td>dd.mmmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ELEVATION</td>\n",
       "      <td>GPS meters above sea-level geoid</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>x.x</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FIX_TYPE</td>\n",
       "      <td>GPS signal indication 2=WASS DGPS for better a...</td>\n",
       "      <td>8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1 to 2</td>\n",
       "      <td>n</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Element name                                        Description  Data type  \\\n",
       "0      HS_data  GeoScout Holland Scientific data logger record...          9   \n",
       "1    LONGITUDE  GPS global meridian coordinate in decimal degrees          7   \n",
       "2     LATITUDE  GPS global parallel coordinate in decimal degrees          7   \n",
       "3    ELEVATION                   GPS meters above sea-level geoid          5   \n",
       "4     FIX_TYPE  GPS signal indication 2=WASS DGPS for better a...          8   \n",
       "\n",
       "   Character length Acceptable Values Required Accepts null  \n",
       "0               NaN               NaN      NaN          NaN  \n",
       "1              13.0       -ddd.mmmmmm        y            y  \n",
       "2              10.0        dd.mmmmmmm        y            y  \n",
       "3               5.0               x.x        y            y  \n",
       "4               1.0            1 to 2        n            y  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "6785f8ef-e7bd-4e52-86a4-a130869a6907",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def data_processing(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub('<br />', '',text)\n",
    "    text = re.sub(r\"http\\S+www\\S+https\\S+\", '',text,flags = re.MULTILINE)\n",
    "    text = re.sub(r'\\@w+|\\#', '',text)\n",
    "    text = re.sub(r'[\\w\\s]', '',text)\n",
    "    text_tokens = word_tokenize(text)\n",
    "    filtered_text =[w for w in text_tokens if not w in stop_words]\n",
    "    return \" \".join(filtered_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "b1d06e68-1b5f-495d-82ec-6ca0623f7dae",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Data type'] = df['Description'].apply(no_of_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b89c8ffb-7b93-41fd-b189-9d0a51b1cbdb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Element name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Data type</th>\n",
       "      <th>Character length</th>\n",
       "      <th>Acceptable Values</th>\n",
       "      <th>Required</th>\n",
       "      <th>Accepts null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HS_data</td>\n",
       "      <td>GeoScout Holland Scientific data logger record...</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LONGITUDE</td>\n",
       "      <td>GPS global meridian coordinate in decimal degrees</td>\n",
       "      <td>7</td>\n",
       "      <td>13.0</td>\n",
       "      <td>-ddd.mmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LATITUDE</td>\n",
       "      <td>GPS global parallel coordinate in decimal degrees</td>\n",
       "      <td>7</td>\n",
       "      <td>10.0</td>\n",
       "      <td>dd.mmmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ELEVATION</td>\n",
       "      <td>GPS meters above sea-level geoid</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>x.x</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FIX_TYPE</td>\n",
       "      <td>GPS signal indication 2=WASS DGPS for better a...</td>\n",
       "      <td>8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1 to 2</td>\n",
       "      <td>n</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Element name                                        Description  Data type  \\\n",
       "0      HS_data  GeoScout Holland Scientific data logger record...          9   \n",
       "1    LONGITUDE  GPS global meridian coordinate in decimal degrees          7   \n",
       "2     LATITUDE  GPS global parallel coordinate in decimal degrees          7   \n",
       "3    ELEVATION                   GPS meters above sea-level geoid          5   \n",
       "4     FIX_TYPE  GPS signal indication 2=WASS DGPS for better a...          8   \n",
       "\n",
       "   Character length Acceptable Values Required Accepts null  \n",
       "0               NaN               NaN      NaN          NaN  \n",
       "1              13.0       -ddd.mmmmmm        y            y  \n",
       "2              10.0        dd.mmmmmmm        y            y  \n",
       "3               5.0               x.x        y            y  \n",
       "4               1.0            1 to 2        n            y  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Data type'] = df['Description'].apply(no_of_words)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c6959b23-0cab-40d7-9926-62ed4c29fa4a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate enteries:  0\n"
     ]
    }
   ],
   "source": [
    "duplicated_count = df.duplicated().sum()\n",
    "print('Number of duplicate enteries: ',duplicated_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2368c515-3c1e-40dc-87bf-668545b2f20a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "stemmer = PorterStemmer()\n",
    "def stemming(data):\n",
    "    text = [stemmer.stem(word) for word in data]\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "565ddfb4-a194-4f3f-96a7-8d2923a8ca3a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.Description= df['Description'].apply(lambda x: stemming(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "758b5f3e-bdf3-45ba-9048-76fc164830e7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Element name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Data type</th>\n",
       "      <th>Character length</th>\n",
       "      <th>Acceptable Values</th>\n",
       "      <th>Required</th>\n",
       "      <th>Accepts null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HS_data</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LONGITUDE</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>13.0</td>\n",
       "      <td>-ddd.mmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LATITUDE</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>10.0</td>\n",
       "      <td>dd.mmmmmmm</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ELEVATION</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>x.x</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FIX_TYPE</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1 to 2</td>\n",
       "      <td>n</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Element name  Description  Data type  Character length Acceptable Values  \\\n",
       "0      HS_data            9          9               NaN               NaN   \n",
       "1    LONGITUDE            7          7              13.0       -ddd.mmmmmm   \n",
       "2     LATITUDE            7          7              10.0        dd.mmmmmmm   \n",
       "3    ELEVATION            5          5               5.0               x.x   \n",
       "4     FIX_TYPE            8          8               1.0            1 to 2   \n",
       "\n",
       "  Required Accepts null  \n",
       "0      NaN          NaN  \n",
       "1        y            y  \n",
       "2        y            y  \n",
       "3        y            y  \n",
       "4        n            y  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Description'] = df['Description'].apply(no_of_words)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f5b9cf48-bc39-425d-85b1-223e0cd33eef",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "count = Counter()\n",
    "for text in pos_Description['Description'].values:\n",
    "    for word in text.split():\n",
    "        count[word] +=1\n",
    "count.most_common(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "326bc07c-fe4f-47f5-8582-3e9cfd18940c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
